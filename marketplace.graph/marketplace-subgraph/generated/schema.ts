// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Marketplace extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Marketplace entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Marketplace must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Marketplace", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Marketplace | null {
    return changetype<Marketplace | null>(
      store.get_in_block("Marketplace", id),
    );
  }

  static load(id: string): Marketplace | null {
    return changetype<Marketplace | null>(store.get("Marketplace", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketplaceName(): string | null {
    let value = this.get("marketplaceName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set marketplaceName(value: string | null) {
    if (!value) {
      this.unset("marketplaceName");
    } else {
      this.set("marketplaceName", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get image_url(): string | null {
    let value = this.get("image_url");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set image_url(value: string | null) {
    if (!value) {
      this.unset("image_url");
    } else {
      this.set("image_url", Value.fromString(<string>value));
    }
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get feePercent(): BigInt {
    let value = this.get("feePercent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feePercent(value: BigInt) {
    this.set("feePercent", Value.fromBigInt(value));
  }

  get categories(): Array<string> {
    let value = this.get("categories");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set categories(value: Array<string>) {
    this.set("categories", Value.fromStringArray(value));
  }

  get theme(): string | null {
    let value = this.get("theme");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set theme(value: string | null) {
    if (!value) {
      this.unset("theme");
    } else {
      this.set("theme", Value.fromString(<string>value));
    }
  }

  get isOwnedResourcesMarketplace(): boolean {
    let value = this.get("isOwnedResourcesMarketplace");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isOwnedResourcesMarketplace(value: boolean) {
    this.set("isOwnedResourcesMarketplace", Value.fromBoolean(value));
  }

  get isUpdating(): boolean {
    let value = this.get("isUpdating");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isUpdating(value: boolean) {
    this.set("isUpdating", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Resource extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Resource entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Resource must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Resource", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Resource | null {
    return changetype<Resource | null>(store.get_in_block("Resource", id));
  }

  static load(id: string): Resource | null {
    return changetype<Resource | null>(store.get("Resource", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get category(): string | null {
    let value = this.get("category");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set category(value: string | null) {
    if (!value) {
      this.unset("category");
    } else {
      this.set("category", Value.fromString(<string>value));
    }
  }

  get image_url(): string | null {
    let value = this.get("image_url");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set image_url(value: string | null) {
    if (!value) {
      this.unset("image_url");
    } else {
      this.set("image_url", Value.fromString(<string>value));
    }
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get resourceHash(): string | null {
    let value = this.get("resourceHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resourceHash(value: string | null) {
    if (!value) {
      this.unset("resourceHash");
    } else {
      this.set("resourceHash", Value.fromString(<string>value));
    }
  }

  get allowListingAccess(): boolean {
    let value = this.get("allowListingAccess");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set allowListingAccess(value: boolean) {
    this.set("allowListingAccess", Value.fromBoolean(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get isUpdating(): boolean {
    let value = this.get("isUpdating");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isUpdating(value: boolean) {
    this.set("isUpdating", Value.fromBoolean(value));
  }
}

export class User extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type User must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): User | null {
    return changetype<User | null>(
      store.get_in_block("User", id.toHexString()),
    );
  }

  static load(id: Bytes): User | null {
    return changetype<User | null>(store.get("User", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get ownedResources(): ResourceLoader {
    return new ResourceLoader(
      "User",
      this.get("id")!.toBytes().toHexString(),
      "ownedResources",
    );
  }

  get marketplaces(): MarketplaceLoader {
    return new MarketplaceLoader(
      "User",
      this.get("id")!.toBytes().toHexString(),
      "marketplaces",
    );
  }
}

export class Purchase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Purchase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Purchase must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Purchase", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Purchase | null {
    return changetype<Purchase | null>(store.get_in_block("Purchase", id));
  }

  static load(id: string): Purchase | null {
    return changetype<Purchase | null>(store.get("Purchase", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resource(): string {
    let value = this.get("resource");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resource(value: string) {
    this.set("resource", Value.fromString(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get marketplace(): string | null {
    let value = this.get("marketplace");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set marketplace(value: string | null) {
    if (!value) {
      this.unset("marketplace");
    } else {
      this.set("marketplace", Value.fromString(<string>value));
    }
  }

  get feePaid(): BigInt | null {
    let value = this.get("feePaid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feePaid(value: BigInt | null) {
    if (!value) {
      this.unset("feePaid");
    } else {
      this.set("feePaid", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get userEarned(): BigInt | null {
    let value = this.get("userEarned");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set userEarned(value: BigInt | null) {
    if (!value) {
      this.unset("userEarned");
    } else {
      this.set("userEarned", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ResourceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Resource[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Resource[]>(value);
  }
}

export class MarketplaceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Marketplace[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Marketplace[]>(value);
  }
}
